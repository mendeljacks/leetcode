mod solve_sudoku;
use solve_sudoku::Solution;

fn main() {
    let mut input = vec![
        ['.', '.', '9', '7', '4', '8', '.', '.', '.'],
        ['7', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '2', '.', '1', '.', '9', '.', '.', '.'],
        ['.', '.', '7', '.', '.', '.', '2', '4', '.'],
        ['.', '6', '4', '.', '1', '.', '5', '9', '.'],
        ['.', '9', '8', '.', '.', '.', '3', '.', '.'],
        ['.', '.', '.', '8', '.', '3', '.', '2', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '6'],
        ['.', '.', '.', '2', '7', '5', '9', '.', '.'],
    ]
    .iter()
    .map(|el| el.to_vec())
    .collect();

    // let mut input = vec![
    //     ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
    //     ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
    //     ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
    //     ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
    //     ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
    //     ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
    //     ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
    //     ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
    //     ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
    // ]
    // .iter()
    // .map(|el| el.to_vec())
    // .collect();

    // let output: Vec<Vec<char>> = [
    //     ['5', '3', '4', '6', '7', '8', '9', '1', '2'],
    //     ['6', '7', '2', '1', '9', '5', '3', '4', '8'],
    //     ['1', '9', '8', '3', '4', '2', '5', '6', '7'],
    //     ['8', '5', '9', '7', '6', '1', '4', '2', '3'],
    //     ['4', '2', '6', '8', '5', '3', '7', '9', '1'],
    //     ['7', '1', '3', '9', '2', '4', '8', '5', '6'],
    //     ['9', '6', '1', '5', '3', '7', '2', '8', '4'],
    //     ['2', '8', '7', '4', '1', '9', '6', '3', '5'],
    //     ['3', '4', '5', '2', '8', '6', '1', '7', '9'],
    // ]
    // .iter()
    // .map(|el| el.to_vec())
    // .collect();

    Solution::solve_sudoku(&mut input);
    // assert_eq!(input, output)
}
